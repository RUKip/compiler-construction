%{
int nextToken;
int match(int token);
void parseExpr();
void parseTerm();
%}
%%

%%

int match(int token) {
  if (nextToken != token) {
    return 0; /* no match */
  }
  nextToken = lex();
  return 1; /* match */
}

/* Function parseExpr
Parses strings in the
language generated by the rule:
<expr> â†’ <term> {(+ |-) <term>}
*/
void parseExpr(){
  parseTerm();
  while (match("-")||match("+")) {
    parseTerm();
  }
}

void parseTerm(){
  nextToken = lex();
  printf("this worked parsed term, %c", nextToken);
}

int main(int argc, char *argv[]) {
  nextToken = lex();
  parseExpr();
  yylex();
  return 0;
}