%{
#include <stdio.h>
#include <stdlib.h>
#include "parser.tab.h"

void showLine();
void initLexer(char *filename);
void finalizeLexer();

static char *inputbuffer;
int linenr = 1; 
%}	
%x COMMENT

%%

(?i:of)					{return OF;}
(?i:if)					{return IF;}
(?i:then)				{return THEN;}
(?i:else)				{return ELSE;}
(?i:while)				{return WHILE;}
(?i:do) 				{return DO;}
(?i:not)				{return NOT;}
(?i:real)				{return REAL;}
(?i:integer)			{return INTEGER;}
".."					{return PUNKTPUNKT;}
":="					{return ASSIGNOP;}
(?i:procedure)			{return PROCEDURE;}
(?i:function)			{return FUNCTION;}
(?i:array)				{return ARRAY;}
(?i:var)				{return VAR;}
(?i:program)			{return PROGRAM;}
(?i:begin)				{return ANFANG;}
(?i:end)				{return ENDE;}
[0-9]+("."[0-9]+)?		{return NUM;}
"*"|"/"|"div"|"mod"		{return MULOP;}
"+"|"-"					{return ADDOP;}
"<"|">"|"<="|">="|"<>"|"=" 	{return RELOP;}
[ \t\r]*				;
[a-zA-Z]([a-zA-Z0-9]|"_")*	{return ID;}
\n						{linenr++;}
"{"             {BEGIN(COMMENT);}
<COMMENT>"}"   {BEGIN(INITIAL);}
<COMMENT>\n    {linenr++;}
<COMMENT>.     ;
.						{return *yytext;}

%%
void initLexer(char *filename) {
  FILE *f = fopen(filename, "r");
  int length;
  
  if (f == NULL) {
    fprintf(stderr, "Error: failed to open file\n");
    exit(EXIT_FAILURE);
  }
  fseek (f, 0, SEEK_END);
  length = ftell (f);
  fseek (f, 0, SEEK_SET);
  inputbuffer = malloc (length+1);
  inputbuffer[length]='\0';
  length = fread (inputbuffer, 1, length, f);
  fclose (f);
  yyin = fopen(filename, "r");
}

void showLine() {
  char *p = inputbuffer;
  int line = linenr;
  while ((*p != '\0') && (line > 1)) {
    line -= (*p == '\n');
    p++;
  }
  printf("line %3d: ", linenr);
  while ((*p != '\0') && (*p != '\n')) {
    putchar(*p);
    p++;
  }
  putchar('\n');
}
 
void finalizeLexer() {
  free(inputbuffer);
  yylex_destroy();
  printf("accepted\n");
}
 
