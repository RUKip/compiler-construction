Grammar

    0 $accept: program $end

    1 program: PROGRAM IDENTIFIER '(' identlist ')' ';' declarations subprogdecls compoundstatement '.'

    2 identlist: IDENTIFIER
    3          | identlist ',' IDENTIFIER

    4 declarations: declarations VAR identlist ':' type ';'
    5             | %empty

    6 type: standardtype
    7     | ARRAY '[' NUMBER RANGE NUMBER ']' OF standardtype

    8 standardtype: INTEGER
    9             | REAL

   10 subprogdecls: subprogdecls subprogdecl ';'
   11             | %empty

   12 subprogdecl: subprogheading declarations compoundstatement

   13 subprogheading: FUNCTION IDENTIFIER arguments ':' standardtype ';'
   14               | PROCEDURE IDENTIFIER arguments ';'

   15 arguments: '(' paramlist ')'
   16          | %empty

   17 paramlist: identlist ':' type
   18          | paramlist ';' identlist ':' type

   19 compoundstatement: BEGINTOK optionalstatements ENDTOK

   20 optionalstatements: statementlist
   21                   | %empty

   22 statementlist: statement
   23              | statementlist ';' statement

   24 statement: variable ASSIGN expression
   25          | procstatement
   26          | compoundstatement
   27          | IF expression THEN statement ELSE statement
   28          | WHILE expression DO statement

   29 variable: IDENTIFIER
   30         | IDENTIFIER '[' expression ']'

   31 procstatement: IDENTIFIER
   32              | IDENTIFIER '(' exprlist ')'

   33 exprlist: expression
   34         | exprlist ',' expression

   35 expression: simpleexpr
   36           | simpleexpr RELOP simpleexpr

   37 simpleexpr: term
   38           | sign term
   39           | simpleexpr '+' term
   40           | simpleexpr '-' term

   41 sign: '+'
   42     | '-'

   43 term: factor
   44     | term MULOP factor

   45 factor: IDENTIFIER
   46       | IDENTIFIER '(' exprlist ')'
   47       | NUMBER
   48       | '(' expression ')'
   49       | NOT factor


Terminals, with rules where they appear

$end (0) 0
'(' (40) 1 15 32 46 48
')' (41) 1 15 32 46 48
'+' (43) 39 41
',' (44) 3 34
'-' (45) 40 42
'.' (46) 1
':' (58) 4 13 17 18
';' (59) 1 4 10 13 14 18 23
'[' (91) 7 30
']' (93) 7 30
error (256)
PROGRAM (258) 1
IDENTIFIER (259) 1 2 3 13 14 29 30 31 32 45 46
VAR (260) 4
ARRAY (261) 7
RANGE (262) 7
NUMBER (263) 7 47
OF (264) 7
INTEGER (265) 8
REAL (266) 9
FUNCTION (267) 13
PROCEDURE (268) 14
BEGINTOK (269) 19
ENDTOK (270) 19
ASSIGN (271) 24
IF (272) 27
THEN (273) 27
ELSE (274) 27
WHILE (275) 28
DO (276) 28
RELOP (277) 36
MULOP (278) 44
NOT (279) 49


Nonterminals, with rules where they appear

$accept (35)
    on left: 0
program (36)
    on left: 1, on right: 0
identlist (37)
    on left: 2 3, on right: 1 3 4 17 18
declarations (38)
    on left: 4 5, on right: 1 4 12
type (39)
    on left: 6 7, on right: 4 17 18
standardtype (40)
    on left: 8 9, on right: 6 7 13
subprogdecls (41)
    on left: 10 11, on right: 1 10
subprogdecl (42)
    on left: 12, on right: 10
subprogheading (43)
    on left: 13 14, on right: 12
arguments (44)
    on left: 15 16, on right: 13 14
paramlist (45)
    on left: 17 18, on right: 15 18
compoundstatement (46)
    on left: 19, on right: 1 12 26
optionalstatements (47)
    on left: 20 21, on right: 19
statementlist (48)
    on left: 22 23, on right: 20 23
statement (49)
    on left: 24 25 26 27 28, on right: 22 23 27 28
variable (50)
    on left: 29 30, on right: 24
procstatement (51)
    on left: 31 32, on right: 25
exprlist (52)
    on left: 33 34, on right: 32 34 46
expression (53)
    on left: 35 36, on right: 24 27 28 30 33 34 48
simpleexpr (54)
    on left: 37 38 39 40, on right: 35 36 39 40
sign (55)
    on left: 41 42, on right: 38
term (56)
    on left: 43 44, on right: 37 38 39 40 44
factor (57)
    on left: 45 46 47 48 49, on right: 43 44 49


State 0

    0 $accept: . program $end

    PROGRAM  shift, and go to state 1

    program  go to state 2


State 1

    1 program: PROGRAM . IDENTIFIER '(' identlist ')' ';' declarations subprogdecls compoundstatement '.'

    IDENTIFIER  shift, and go to state 3


State 2

    0 $accept: program . $end

    $end  shift, and go to state 4


State 3

    1 program: PROGRAM IDENTIFIER . '(' identlist ')' ';' declarations subprogdecls compoundstatement '.'

    '('  shift, and go to state 5


State 4

    0 $accept: program $end .

    $default  accept


State 5

    1 program: PROGRAM IDENTIFIER '(' . identlist ')' ';' declarations subprogdecls compoundstatement '.'

    IDENTIFIER  shift, and go to state 6

    identlist  go to state 7


State 6

    2 identlist: IDENTIFIER .

    $default  reduce using rule 2 (identlist)


State 7

    1 program: PROGRAM IDENTIFIER '(' identlist . ')' ';' declarations subprogdecls compoundstatement '.'
    3 identlist: identlist . ',' IDENTIFIER

    ')'  shift, and go to state 8
    ','  shift, and go to state 9


State 8

    1 program: PROGRAM IDENTIFIER '(' identlist ')' . ';' declarations subprogdecls compoundstatement '.'

    ';'  shift, and go to state 10


State 9

    3 identlist: identlist ',' . IDENTIFIER

    IDENTIFIER  shift, and go to state 11


State 10

    1 program: PROGRAM IDENTIFIER '(' identlist ')' ';' . declarations subprogdecls compoundstatement '.'

    $default  reduce using rule 5 (declarations)

    declarations  go to state 12


State 11

    3 identlist: identlist ',' IDENTIFIER .

    $default  reduce using rule 3 (identlist)


State 12

    1 program: PROGRAM IDENTIFIER '(' identlist ')' ';' declarations . subprogdecls compoundstatement '.'
    4 declarations: declarations . VAR identlist ':' type ';'

    VAR  shift, and go to state 13

    $default  reduce using rule 11 (subprogdecls)

    subprogdecls  go to state 14


State 13

    4 declarations: declarations VAR . identlist ':' type ';'

    IDENTIFIER  shift, and go to state 6

    identlist  go to state 15


State 14

    1 program: PROGRAM IDENTIFIER '(' identlist ')' ';' declarations subprogdecls . compoundstatement '.'
   10 subprogdecls: subprogdecls . subprogdecl ';'

    FUNCTION   shift, and go to state 16
    PROCEDURE  shift, and go to state 17
    BEGINTOK   shift, and go to state 18

    subprogdecl        go to state 19
    subprogheading     go to state 20
    compoundstatement  go to state 21


State 15

    3 identlist: identlist . ',' IDENTIFIER
    4 declarations: declarations VAR identlist . ':' type ';'

    ','  shift, and go to state 9
    ':'  shift, and go to state 22


State 16

   13 subprogheading: FUNCTION . IDENTIFIER arguments ':' standardtype ';'

    IDENTIFIER  shift, and go to state 23


State 17

   14 subprogheading: PROCEDURE . IDENTIFIER arguments ';'

    IDENTIFIER  shift, and go to state 24


State 18

   19 compoundstatement: BEGINTOK . optionalstatements ENDTOK

    IDENTIFIER  shift, and go to state 25
    BEGINTOK    shift, and go to state 18
    IF          shift, and go to state 26
    WHILE       shift, and go to state 27

    $default  reduce using rule 21 (optionalstatements)

    compoundstatement   go to state 28
    optionalstatements  go to state 29
    statementlist       go to state 30
    statement           go to state 31
    variable            go to state 32
    procstatement       go to state 33


State 19

   10 subprogdecls: subprogdecls subprogdecl . ';'

    ';'  shift, and go to state 34


State 20

   12 subprogdecl: subprogheading . declarations compoundstatement

    $default  reduce using rule 5 (declarations)

    declarations  go to state 35


State 21

    1 program: PROGRAM IDENTIFIER '(' identlist ')' ';' declarations subprogdecls compoundstatement . '.'

    '.'  shift, and go to state 36


State 22

    4 declarations: declarations VAR identlist ':' . type ';'

    ARRAY    shift, and go to state 37
    INTEGER  shift, and go to state 38
    REAL     shift, and go to state 39

    type          go to state 40
    standardtype  go to state 41


State 23

   13 subprogheading: FUNCTION IDENTIFIER . arguments ':' standardtype ';'

    '('  shift, and go to state 42

    $default  reduce using rule 16 (arguments)

    arguments  go to state 43


State 24

   14 subprogheading: PROCEDURE IDENTIFIER . arguments ';'

    '('  shift, and go to state 42

    $default  reduce using rule 16 (arguments)

    arguments  go to state 44


State 25

   29 variable: IDENTIFIER .
   30         | IDENTIFIER . '[' expression ']'
   31 procstatement: IDENTIFIER .
   32              | IDENTIFIER . '(' exprlist ')'

    '('  shift, and go to state 45
    '['  shift, and go to state 46

    ASSIGN    reduce using rule 29 (variable)
    $default  reduce using rule 31 (procstatement)


State 26

   27 statement: IF . expression THEN statement ELSE statement

    IDENTIFIER  shift, and go to state 47
    NUMBER      shift, and go to state 48
    NOT         shift, and go to state 49
    '('         shift, and go to state 50
    '+'         shift, and go to state 51
    '-'         shift, and go to state 52

    expression  go to state 53
    simpleexpr  go to state 54
    sign        go to state 55
    term        go to state 56
    factor      go to state 57


State 27

   28 statement: WHILE . expression DO statement

    IDENTIFIER  shift, and go to state 47
    NUMBER      shift, and go to state 48
    NOT         shift, and go to state 49
    '('         shift, and go to state 50
    '+'         shift, and go to state 51
    '-'         shift, and go to state 52

    expression  go to state 58
    simpleexpr  go to state 54
    sign        go to state 55
    term        go to state 56
    factor      go to state 57


State 28

   26 statement: compoundstatement .

    $default  reduce using rule 26 (statement)


State 29

   19 compoundstatement: BEGINTOK optionalstatements . ENDTOK

    ENDTOK  shift, and go to state 59


State 30

   20 optionalstatements: statementlist .
   23 statementlist: statementlist . ';' statement

    ';'  shift, and go to state 60

    $default  reduce using rule 20 (optionalstatements)


State 31

   22 statementlist: statement .

    $default  reduce using rule 22 (statementlist)


State 32

   24 statement: variable . ASSIGN expression

    ASSIGN  shift, and go to state 61


State 33

   25 statement: procstatement .

    $default  reduce using rule 25 (statement)


State 34

   10 subprogdecls: subprogdecls subprogdecl ';' .

    $default  reduce using rule 10 (subprogdecls)


State 35

    4 declarations: declarations . VAR identlist ':' type ';'
   12 subprogdecl: subprogheading declarations . compoundstatement

    VAR       shift, and go to state 13
    BEGINTOK  shift, and go to state 18

    compoundstatement  go to state 62


State 36

    1 program: PROGRAM IDENTIFIER '(' identlist ')' ';' declarations subprogdecls compoundstatement '.' .

    $default  reduce using rule 1 (program)


State 37

    7 type: ARRAY . '[' NUMBER RANGE NUMBER ']' OF standardtype

    '['  shift, and go to state 63


State 38

    8 standardtype: INTEGER .

    $default  reduce using rule 8 (standardtype)


State 39

    9 standardtype: REAL .

    $default  reduce using rule 9 (standardtype)


State 40

    4 declarations: declarations VAR identlist ':' type . ';'

    ';'  shift, and go to state 64


State 41

    6 type: standardtype .

    $default  reduce using rule 6 (type)


State 42

   15 arguments: '(' . paramlist ')'

    IDENTIFIER  shift, and go to state 6

    identlist  go to state 65
    paramlist  go to state 66


State 43

   13 subprogheading: FUNCTION IDENTIFIER arguments . ':' standardtype ';'

    ':'  shift, and go to state 67


State 44

   14 subprogheading: PROCEDURE IDENTIFIER arguments . ';'

    ';'  shift, and go to state 68


State 45

   32 procstatement: IDENTIFIER '(' . exprlist ')'

    IDENTIFIER  shift, and go to state 47
    NUMBER      shift, and go to state 48
    NOT         shift, and go to state 49
    '('         shift, and go to state 50
    '+'         shift, and go to state 51
    '-'         shift, and go to state 52

    exprlist    go to state 69
    expression  go to state 70
    simpleexpr  go to state 54
    sign        go to state 55
    term        go to state 56
    factor      go to state 57


State 46

   30 variable: IDENTIFIER '[' . expression ']'

    IDENTIFIER  shift, and go to state 47
    NUMBER      shift, and go to state 48
    NOT         shift, and go to state 49
    '('         shift, and go to state 50
    '+'         shift, and go to state 51
    '-'         shift, and go to state 52

    expression  go to state 71
    simpleexpr  go to state 54
    sign        go to state 55
    term        go to state 56
    factor      go to state 57


State 47

   45 factor: IDENTIFIER .
   46       | IDENTIFIER . '(' exprlist ')'

    '('  shift, and go to state 72

    $default  reduce using rule 45 (factor)


State 48

   47 factor: NUMBER .

    $default  reduce using rule 47 (factor)


State 49

   49 factor: NOT . factor

    IDENTIFIER  shift, and go to state 47
    NUMBER      shift, and go to state 48
    NOT         shift, and go to state 49
    '('         shift, and go to state 50

    factor  go to state 73


State 50

   48 factor: '(' . expression ')'

    IDENTIFIER  shift, and go to state 47
    NUMBER      shift, and go to state 48
    NOT         shift, and go to state 49
    '('         shift, and go to state 50
    '+'         shift, and go to state 51
    '-'         shift, and go to state 52

    expression  go to state 74
    simpleexpr  go to state 54
    sign        go to state 55
    term        go to state 56
    factor      go to state 57


State 51

   41 sign: '+' .

    $default  reduce using rule 41 (sign)


State 52

   42 sign: '-' .

    $default  reduce using rule 42 (sign)


State 53

   27 statement: IF expression . THEN statement ELSE statement

    THEN  shift, and go to state 75


State 54

   35 expression: simpleexpr .
   36           | simpleexpr . RELOP simpleexpr
   39 simpleexpr: simpleexpr . '+' term
   40           | simpleexpr . '-' term

    RELOP  shift, and go to state 76
    '+'    shift, and go to state 77
    '-'    shift, and go to state 78

    $default  reduce using rule 35 (expression)


State 55

   38 simpleexpr: sign . term

    IDENTIFIER  shift, and go to state 47
    NUMBER      shift, and go to state 48
    NOT         shift, and go to state 49
    '('         shift, and go to state 50

    term    go to state 79
    factor  go to state 57


State 56

   37 simpleexpr: term .
   44 term: term . MULOP factor

    MULOP  shift, and go to state 80

    $default  reduce using rule 37 (simpleexpr)


State 57

   43 term: factor .

    $default  reduce using rule 43 (term)


State 58

   28 statement: WHILE expression . DO statement

    DO  shift, and go to state 81


State 59

   19 compoundstatement: BEGINTOK optionalstatements ENDTOK .

    $default  reduce using rule 19 (compoundstatement)


State 60

   23 statementlist: statementlist ';' . statement

    IDENTIFIER  shift, and go to state 25
    BEGINTOK    shift, and go to state 18
    IF          shift, and go to state 26
    WHILE       shift, and go to state 27

    compoundstatement  go to state 28
    statement          go to state 82
    variable           go to state 32
    procstatement      go to state 33


State 61

   24 statement: variable ASSIGN . expression

    IDENTIFIER  shift, and go to state 47
    NUMBER      shift, and go to state 48
    NOT         shift, and go to state 49
    '('         shift, and go to state 50
    '+'         shift, and go to state 51
    '-'         shift, and go to state 52

    expression  go to state 83
    simpleexpr  go to state 54
    sign        go to state 55
    term        go to state 56
    factor      go to state 57


State 62

   12 subprogdecl: subprogheading declarations compoundstatement .

    $default  reduce using rule 12 (subprogdecl)


State 63

    7 type: ARRAY '[' . NUMBER RANGE NUMBER ']' OF standardtype

    NUMBER  shift, and go to state 84


State 64

    4 declarations: declarations VAR identlist ':' type ';' .

    $default  reduce using rule 4 (declarations)


State 65

    3 identlist: identlist . ',' IDENTIFIER
   17 paramlist: identlist . ':' type

    ','  shift, and go to state 9
    ':'  shift, and go to state 85


State 66

   15 arguments: '(' paramlist . ')'
   18 paramlist: paramlist . ';' identlist ':' type

    ')'  shift, and go to state 86
    ';'  shift, and go to state 87


State 67

   13 subprogheading: FUNCTION IDENTIFIER arguments ':' . standardtype ';'

    INTEGER  shift, and go to state 38
    REAL     shift, and go to state 39

    standardtype  go to state 88


State 68

   14 subprogheading: PROCEDURE IDENTIFIER arguments ';' .

    $default  reduce using rule 14 (subprogheading)


State 69

   32 procstatement: IDENTIFIER '(' exprlist . ')'
   34 exprlist: exprlist . ',' expression

    ')'  shift, and go to state 89
    ','  shift, and go to state 90


State 70

   33 exprlist: expression .

    $default  reduce using rule 33 (exprlist)


State 71

   30 variable: IDENTIFIER '[' expression . ']'

    ']'  shift, and go to state 91


State 72

   46 factor: IDENTIFIER '(' . exprlist ')'

    IDENTIFIER  shift, and go to state 47
    NUMBER      shift, and go to state 48
    NOT         shift, and go to state 49
    '('         shift, and go to state 50
    '+'         shift, and go to state 51
    '-'         shift, and go to state 52

    exprlist    go to state 92
    expression  go to state 70
    simpleexpr  go to state 54
    sign        go to state 55
    term        go to state 56
    factor      go to state 57


State 73

   49 factor: NOT factor .

    $default  reduce using rule 49 (factor)


State 74

   48 factor: '(' expression . ')'

    ')'  shift, and go to state 93


State 75

   27 statement: IF expression THEN . statement ELSE statement

    IDENTIFIER  shift, and go to state 25
    BEGINTOK    shift, and go to state 18
    IF          shift, and go to state 26
    WHILE       shift, and go to state 27

    compoundstatement  go to state 28
    statement          go to state 94
    variable           go to state 32
    procstatement      go to state 33


State 76

   36 expression: simpleexpr RELOP . simpleexpr

    IDENTIFIER  shift, and go to state 47
    NUMBER      shift, and go to state 48
    NOT         shift, and go to state 49
    '('         shift, and go to state 50
    '+'         shift, and go to state 51
    '-'         shift, and go to state 52

    simpleexpr  go to state 95
    sign        go to state 55
    term        go to state 56
    factor      go to state 57


State 77

   39 simpleexpr: simpleexpr '+' . term

    IDENTIFIER  shift, and go to state 47
    NUMBER      shift, and go to state 48
    NOT         shift, and go to state 49
    '('         shift, and go to state 50

    term    go to state 96
    factor  go to state 57


State 78

   40 simpleexpr: simpleexpr '-' . term

    IDENTIFIER  shift, and go to state 47
    NUMBER      shift, and go to state 48
    NOT         shift, and go to state 49
    '('         shift, and go to state 50

    term    go to state 97
    factor  go to state 57


State 79

   38 simpleexpr: sign term .
   44 term: term . MULOP factor

    MULOP  shift, and go to state 80

    $default  reduce using rule 38 (simpleexpr)


State 80

   44 term: term MULOP . factor

    IDENTIFIER  shift, and go to state 47
    NUMBER      shift, and go to state 48
    NOT         shift, and go to state 49
    '('         shift, and go to state 50

    factor  go to state 98


State 81

   28 statement: WHILE expression DO . statement

    IDENTIFIER  shift, and go to state 25
    BEGINTOK    shift, and go to state 18
    IF          shift, and go to state 26
    WHILE       shift, and go to state 27

    compoundstatement  go to state 28
    statement          go to state 99
    variable           go to state 32
    procstatement      go to state 33


State 82

   23 statementlist: statementlist ';' statement .

    $default  reduce using rule 23 (statementlist)


State 83

   24 statement: variable ASSIGN expression .

    $default  reduce using rule 24 (statement)


State 84

    7 type: ARRAY '[' NUMBER . RANGE NUMBER ']' OF standardtype

    RANGE  shift, and go to state 100


State 85

   17 paramlist: identlist ':' . type

    ARRAY    shift, and go to state 37
    INTEGER  shift, and go to state 38
    REAL     shift, and go to state 39

    type          go to state 101
    standardtype  go to state 41


State 86

   15 arguments: '(' paramlist ')' .

    $default  reduce using rule 15 (arguments)


State 87

   18 paramlist: paramlist ';' . identlist ':' type

    IDENTIFIER  shift, and go to state 6

    identlist  go to state 102


State 88

   13 subprogheading: FUNCTION IDENTIFIER arguments ':' standardtype . ';'

    ';'  shift, and go to state 103


State 89

   32 procstatement: IDENTIFIER '(' exprlist ')' .

    $default  reduce using rule 32 (procstatement)


State 90

   34 exprlist: exprlist ',' . expression

    IDENTIFIER  shift, and go to state 47
    NUMBER      shift, and go to state 48
    NOT         shift, and go to state 49
    '('         shift, and go to state 50
    '+'         shift, and go to state 51
    '-'         shift, and go to state 52

    expression  go to state 104
    simpleexpr  go to state 54
    sign        go to state 55
    term        go to state 56
    factor      go to state 57


State 91

   30 variable: IDENTIFIER '[' expression ']' .

    $default  reduce using rule 30 (variable)


State 92

   34 exprlist: exprlist . ',' expression
   46 factor: IDENTIFIER '(' exprlist . ')'

    ')'  shift, and go to state 105
    ','  shift, and go to state 90


State 93

   48 factor: '(' expression ')' .

    $default  reduce using rule 48 (factor)


State 94

   27 statement: IF expression THEN statement . ELSE statement

    ELSE  shift, and go to state 106


State 95

   36 expression: simpleexpr RELOP simpleexpr .
   39 simpleexpr: simpleexpr . '+' term
   40           | simpleexpr . '-' term

    '+'  shift, and go to state 77
    '-'  shift, and go to state 78

    $default  reduce using rule 36 (expression)


State 96

   39 simpleexpr: simpleexpr '+' term .
   44 term: term . MULOP factor

    MULOP  shift, and go to state 80

    $default  reduce using rule 39 (simpleexpr)


State 97

   40 simpleexpr: simpleexpr '-' term .
   44 term: term . MULOP factor

    MULOP  shift, and go to state 80

    $default  reduce using rule 40 (simpleexpr)


State 98

   44 term: term MULOP factor .

    $default  reduce using rule 44 (term)


State 99

   28 statement: WHILE expression DO statement .

    $default  reduce using rule 28 (statement)


State 100

    7 type: ARRAY '[' NUMBER RANGE . NUMBER ']' OF standardtype

    NUMBER  shift, and go to state 107


State 101

   17 paramlist: identlist ':' type .

    $default  reduce using rule 17 (paramlist)


State 102

    3 identlist: identlist . ',' IDENTIFIER
   18 paramlist: paramlist ';' identlist . ':' type

    ','  shift, and go to state 9
    ':'  shift, and go to state 108


State 103

   13 subprogheading: FUNCTION IDENTIFIER arguments ':' standardtype ';' .

    $default  reduce using rule 13 (subprogheading)


State 104

   34 exprlist: exprlist ',' expression .

    $default  reduce using rule 34 (exprlist)


State 105

   46 factor: IDENTIFIER '(' exprlist ')' .

    $default  reduce using rule 46 (factor)


State 106

   27 statement: IF expression THEN statement ELSE . statement

    IDENTIFIER  shift, and go to state 25
    BEGINTOK    shift, and go to state 18
    IF          shift, and go to state 26
    WHILE       shift, and go to state 27

    compoundstatement  go to state 28
    statement          go to state 109
    variable           go to state 32
    procstatement      go to state 33


State 107

    7 type: ARRAY '[' NUMBER RANGE NUMBER . ']' OF standardtype

    ']'  shift, and go to state 110


State 108

   18 paramlist: paramlist ';' identlist ':' . type

    ARRAY    shift, and go to state 37
    INTEGER  shift, and go to state 38
    REAL     shift, and go to state 39

    type          go to state 111
    standardtype  go to state 41


State 109

   27 statement: IF expression THEN statement ELSE statement .

    $default  reduce using rule 27 (statement)


State 110

    7 type: ARRAY '[' NUMBER RANGE NUMBER ']' . OF standardtype

    OF  shift, and go to state 112


State 111

   18 paramlist: paramlist ';' identlist ':' type .

    $default  reduce using rule 18 (paramlist)


State 112

    7 type: ARRAY '[' NUMBER RANGE NUMBER ']' OF . standardtype

    INTEGER  shift, and go to state 38
    REAL     shift, and go to state 39

    standardtype  go to state 113


State 113

    7 type: ARRAY '[' NUMBER RANGE NUMBER ']' OF standardtype .

    $default  reduce using rule 7 (type)
