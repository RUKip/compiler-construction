Grammar

    0 $accept: program $end

    1 program: PROGRAM IDENTIFIER '(' identlist ')' ';' declarations subprogdecls compoundstatement '.'

    2 identlist: IDENTIFIER
    3          | identlist ',' IDENTIFIER

    4 declarations: declarations VAR identlist ':' type ';'
    5             | %empty

    6 type: standardtype
    7     | ARRAY '[' NUMBER RANGE NUMBER ']' OF standardtype

    8 standardtype: INTEGER
    9             | REAL

   10 subprogdecls: subprogdecls subprogdecl ';'
   11             | %empty

   12 subprogdecl: subprogheading declarations compoundstatement

   13 $@1: %empty

   14 subprogheading: FUNCTION $@1 IDENTIFIER arguments ':' standardtype ';'
   15               | PROCEDURE IDENTIFIER arguments ';'

   16 arguments: '(' paramlist ')'
   17          | %empty

   18 paramlist: identlist ':' type
   19          | paramlist ';' identlist ':' type

   20 compoundstatement: BEGINTOK optionalstatements ENDTOK

   21 optionalstatements: statementlist
   22                   | %empty

   23 statementlist: statement
   24              | statementlist ';' statement

   25 statement: variable ASSIGN expression
   26          | procstatement
   27          | compoundstatement
   28          | IF expression THEN statement ELSE statement
   29          | WHILE expression DO statement

   30 variable: IDENTIFIER
   31         | IDENTIFIER '[' expression ']'

   32 procstatement: IDENTIFIER
   33              | IDENTIFIER '(' exprlist ')'

   34 exprlist: expression
   35         | exprlist ',' expression

   36 expression: simpleexpr
   37           | simpleexpr RELOP simpleexpr

   38 simpleexpr: term
   39           | sign term
   40           | simpleexpr '+' term
   41           | simpleexpr '-' term

   42 sign: '+'
   43     | '-'

   44 term: factor
   45     | term MULOP factor

   46 factor: IDENTIFIER
   47       | IDENTIFIER '(' exprlist ')'
   48       | NUMBER
   49       | '(' expression ')'
   50       | NOT factor


Terminals, with rules where they appear

$end (0) 0
'(' (40) 1 16 33 47 49
')' (41) 1 16 33 47 49
'+' (43) 40 42
',' (44) 3 35
'-' (45) 41 43
'.' (46) 1
':' (58) 4 14 18 19
';' (59) 1 4 10 14 15 19 24
'[' (91) 7 31
']' (93) 7 31
error (256)
PROGRAM (258) 1
IDENTIFIER (259) 1 2 3 14 15 30 31 32 33 46 47
VAR (260) 4
ARRAY (261) 7
RANGE (262) 7
NUMBER (263) 7 48
OF (264) 7
INTEGER (265) 8
REAL (266) 9
FUNCTION (267) 14
PROCEDURE (268) 15
BEGINTOK (269) 20
ENDTOK (270) 20
ASSIGN (271) 25
IF (272) 28
THEN (273) 28
ELSE (274) 28
WHILE (275) 29
DO (276) 29
RELOP (277) 37
MULOP (278) 45
NOT (279) 50


Nonterminals, with rules where they appear

$accept (35)
    on left: 0
program (36)
    on left: 1, on right: 0
identlist (37)
    on left: 2 3, on right: 1 3 4 18 19
declarations (38)
    on left: 4 5, on right: 1 4 12
type (39)
    on left: 6 7, on right: 4 18 19
standardtype (40)
    on left: 8 9, on right: 6 7 14
subprogdecls (41)
    on left: 10 11, on right: 1 10
subprogdecl (42)
    on left: 12, on right: 10
subprogheading (43)
    on left: 14 15, on right: 12
$@1 (44)
    on left: 13, on right: 14
arguments (45)
    on left: 16 17, on right: 14 15
paramlist (46)
    on left: 18 19, on right: 16 19
compoundstatement (47)
    on left: 20, on right: 1 12 27
optionalstatements (48)
    on left: 21 22, on right: 20
statementlist (49)
    on left: 23 24, on right: 21 24
statement (50)
    on left: 25 26 27 28 29, on right: 23 24 28 29
variable (51)
    on left: 30 31, on right: 25
procstatement (52)
    on left: 32 33, on right: 26
exprlist (53)
    on left: 34 35, on right: 33 35 47
expression (54)
    on left: 36 37, on right: 25 28 29 31 34 35 49
simpleexpr (55)
    on left: 38 39 40 41, on right: 36 37 40 41
sign (56)
    on left: 42 43, on right: 39
term (57)
    on left: 44 45, on right: 38 39 40 41 45
factor (58)
    on left: 46 47 48 49 50, on right: 44 45 50


State 0

    0 $accept: . program $end

    PROGRAM  shift, and go to state 1

    program  go to state 2


State 1

    1 program: PROGRAM . IDENTIFIER '(' identlist ')' ';' declarations subprogdecls compoundstatement '.'

    IDENTIFIER  shift, and go to state 3


State 2

    0 $accept: program . $end

    $end  shift, and go to state 4


State 3

    1 program: PROGRAM IDENTIFIER . '(' identlist ')' ';' declarations subprogdecls compoundstatement '.'

    '('  shift, and go to state 5


State 4

    0 $accept: program $end .

    $default  accept


State 5

    1 program: PROGRAM IDENTIFIER '(' . identlist ')' ';' declarations subprogdecls compoundstatement '.'

    IDENTIFIER  shift, and go to state 6

    identlist  go to state 7


State 6

    2 identlist: IDENTIFIER .

    $default  reduce using rule 2 (identlist)


State 7

    1 program: PROGRAM IDENTIFIER '(' identlist . ')' ';' declarations subprogdecls compoundstatement '.'
    3 identlist: identlist . ',' IDENTIFIER

    ')'  shift, and go to state 8
    ','  shift, and go to state 9


State 8

    1 program: PROGRAM IDENTIFIER '(' identlist ')' . ';' declarations subprogdecls compoundstatement '.'

    ';'  shift, and go to state 10


State 9

    3 identlist: identlist ',' . IDENTIFIER

    IDENTIFIER  shift, and go to state 11


State 10

    1 program: PROGRAM IDENTIFIER '(' identlist ')' ';' . declarations subprogdecls compoundstatement '.'

    $default  reduce using rule 5 (declarations)

    declarations  go to state 12


State 11

    3 identlist: identlist ',' IDENTIFIER .

    $default  reduce using rule 3 (identlist)


State 12

    1 program: PROGRAM IDENTIFIER '(' identlist ')' ';' declarations . subprogdecls compoundstatement '.'
    4 declarations: declarations . VAR identlist ':' type ';'

    VAR  shift, and go to state 13

    $default  reduce using rule 11 (subprogdecls)

    subprogdecls  go to state 14


State 13

    4 declarations: declarations VAR . identlist ':' type ';'

    IDENTIFIER  shift, and go to state 6

    identlist  go to state 15


State 14

    1 program: PROGRAM IDENTIFIER '(' identlist ')' ';' declarations subprogdecls . compoundstatement '.'
   10 subprogdecls: subprogdecls . subprogdecl ';'

    FUNCTION   shift, and go to state 16
    PROCEDURE  shift, and go to state 17
    BEGINTOK   shift, and go to state 18

    subprogdecl        go to state 19
    subprogheading     go to state 20
    compoundstatement  go to state 21


State 15

    3 identlist: identlist . ',' IDENTIFIER
    4 declarations: declarations VAR identlist . ':' type ';'

    ','  shift, and go to state 9
    ':'  shift, and go to state 22


State 16

   14 subprogheading: FUNCTION . $@1 IDENTIFIER arguments ':' standardtype ';'

    $default  reduce using rule 13 ($@1)

    $@1  go to state 23


State 17

   15 subprogheading: PROCEDURE . IDENTIFIER arguments ';'

    IDENTIFIER  shift, and go to state 24


State 18

   20 compoundstatement: BEGINTOK . optionalstatements ENDTOK

    IDENTIFIER  shift, and go to state 25
    BEGINTOK    shift, and go to state 18
    IF          shift, and go to state 26
    WHILE       shift, and go to state 27

    $default  reduce using rule 22 (optionalstatements)

    compoundstatement   go to state 28
    optionalstatements  go to state 29
    statementlist       go to state 30
    statement           go to state 31
    variable            go to state 32
    procstatement       go to state 33


State 19

   10 subprogdecls: subprogdecls subprogdecl . ';'

    ';'  shift, and go to state 34


State 20

   12 subprogdecl: subprogheading . declarations compoundstatement

    $default  reduce using rule 5 (declarations)

    declarations  go to state 35


State 21

    1 program: PROGRAM IDENTIFIER '(' identlist ')' ';' declarations subprogdecls compoundstatement . '.'

    '.'  shift, and go to state 36


State 22

    4 declarations: declarations VAR identlist ':' . type ';'

    ARRAY    shift, and go to state 37
    INTEGER  shift, and go to state 38
    REAL     shift, and go to state 39

    type          go to state 40
    standardtype  go to state 41


State 23

   14 subprogheading: FUNCTION $@1 . IDENTIFIER arguments ':' standardtype ';'

    IDENTIFIER  shift, and go to state 42


State 24

   15 subprogheading: PROCEDURE IDENTIFIER . arguments ';'

    '('  shift, and go to state 43

    $default  reduce using rule 17 (arguments)

    arguments  go to state 44


State 25

   30 variable: IDENTIFIER .
   31         | IDENTIFIER . '[' expression ']'
   32 procstatement: IDENTIFIER .
   33              | IDENTIFIER . '(' exprlist ')'

    '('  shift, and go to state 45
    '['  shift, and go to state 46

    ASSIGN    reduce using rule 30 (variable)
    $default  reduce using rule 32 (procstatement)


State 26

   28 statement: IF . expression THEN statement ELSE statement

    IDENTIFIER  shift, and go to state 47
    NUMBER      shift, and go to state 48
    NOT         shift, and go to state 49
    '('         shift, and go to state 50
    '+'         shift, and go to state 51
    '-'         shift, and go to state 52

    expression  go to state 53
    simpleexpr  go to state 54
    sign        go to state 55
    term        go to state 56
    factor      go to state 57


State 27

   29 statement: WHILE . expression DO statement

    IDENTIFIER  shift, and go to state 47
    NUMBER      shift, and go to state 48
    NOT         shift, and go to state 49
    '('         shift, and go to state 50
    '+'         shift, and go to state 51
    '-'         shift, and go to state 52

    expression  go to state 58
    simpleexpr  go to state 54
    sign        go to state 55
    term        go to state 56
    factor      go to state 57


State 28

   27 statement: compoundstatement .

    $default  reduce using rule 27 (statement)


State 29

   20 compoundstatement: BEGINTOK optionalstatements . ENDTOK

    ENDTOK  shift, and go to state 59


State 30

   21 optionalstatements: statementlist .
   24 statementlist: statementlist . ';' statement

    ';'  shift, and go to state 60

    $default  reduce using rule 21 (optionalstatements)


State 31

   23 statementlist: statement .

    $default  reduce using rule 23 (statementlist)


State 32

   25 statement: variable . ASSIGN expression

    ASSIGN  shift, and go to state 61


State 33

   26 statement: procstatement .

    $default  reduce using rule 26 (statement)


State 34

   10 subprogdecls: subprogdecls subprogdecl ';' .

    $default  reduce using rule 10 (subprogdecls)


State 35

    4 declarations: declarations . VAR identlist ':' type ';'
   12 subprogdecl: subprogheading declarations . compoundstatement

    VAR       shift, and go to state 13
    BEGINTOK  shift, and go to state 18

    compoundstatement  go to state 62


State 36

    1 program: PROGRAM IDENTIFIER '(' identlist ')' ';' declarations subprogdecls compoundstatement '.' .

    $default  reduce using rule 1 (program)


State 37

    7 type: ARRAY . '[' NUMBER RANGE NUMBER ']' OF standardtype

    '['  shift, and go to state 63


State 38

    8 standardtype: INTEGER .

    $default  reduce using rule 8 (standardtype)


State 39

    9 standardtype: REAL .

    $default  reduce using rule 9 (standardtype)


State 40

    4 declarations: declarations VAR identlist ':' type . ';'

    ';'  shift, and go to state 64


State 41

    6 type: standardtype .

    $default  reduce using rule 6 (type)


State 42

   14 subprogheading: FUNCTION $@1 IDENTIFIER . arguments ':' standardtype ';'

    '('  shift, and go to state 43

    $default  reduce using rule 17 (arguments)

    arguments  go to state 65


State 43

   16 arguments: '(' . paramlist ')'

    IDENTIFIER  shift, and go to state 6

    identlist  go to state 66
    paramlist  go to state 67


State 44

   15 subprogheading: PROCEDURE IDENTIFIER arguments . ';'

    ';'  shift, and go to state 68


State 45

   33 procstatement: IDENTIFIER '(' . exprlist ')'

    IDENTIFIER  shift, and go to state 47
    NUMBER      shift, and go to state 48
    NOT         shift, and go to state 49
    '('         shift, and go to state 50
    '+'         shift, and go to state 51
    '-'         shift, and go to state 52

    exprlist    go to state 69
    expression  go to state 70
    simpleexpr  go to state 54
    sign        go to state 55
    term        go to state 56
    factor      go to state 57


State 46

   31 variable: IDENTIFIER '[' . expression ']'

    IDENTIFIER  shift, and go to state 47
    NUMBER      shift, and go to state 48
    NOT         shift, and go to state 49
    '('         shift, and go to state 50
    '+'         shift, and go to state 51
    '-'         shift, and go to state 52

    expression  go to state 71
    simpleexpr  go to state 54
    sign        go to state 55
    term        go to state 56
    factor      go to state 57


State 47

   46 factor: IDENTIFIER .
   47       | IDENTIFIER . '(' exprlist ')'

    '('  shift, and go to state 72

    $default  reduce using rule 46 (factor)


State 48

   48 factor: NUMBER .

    $default  reduce using rule 48 (factor)


State 49

   50 factor: NOT . factor

    IDENTIFIER  shift, and go to state 47
    NUMBER      shift, and go to state 48
    NOT         shift, and go to state 49
    '('         shift, and go to state 50

    factor  go to state 73


State 50

   49 factor: '(' . expression ')'

    IDENTIFIER  shift, and go to state 47
    NUMBER      shift, and go to state 48
    NOT         shift, and go to state 49
    '('         shift, and go to state 50
    '+'         shift, and go to state 51
    '-'         shift, and go to state 52

    expression  go to state 74
    simpleexpr  go to state 54
    sign        go to state 55
    term        go to state 56
    factor      go to state 57


State 51

   42 sign: '+' .

    $default  reduce using rule 42 (sign)


State 52

   43 sign: '-' .

    $default  reduce using rule 43 (sign)


State 53

   28 statement: IF expression . THEN statement ELSE statement

    THEN  shift, and go to state 75


State 54

   36 expression: simpleexpr .
   37           | simpleexpr . RELOP simpleexpr
   40 simpleexpr: simpleexpr . '+' term
   41           | simpleexpr . '-' term

    RELOP  shift, and go to state 76
    '+'    shift, and go to state 77
    '-'    shift, and go to state 78

    $default  reduce using rule 36 (expression)


State 55

   39 simpleexpr: sign . term

    IDENTIFIER  shift, and go to state 47
    NUMBER      shift, and go to state 48
    NOT         shift, and go to state 49
    '('         shift, and go to state 50

    term    go to state 79
    factor  go to state 57


State 56

   38 simpleexpr: term .
   45 term: term . MULOP factor

    MULOP  shift, and go to state 80

    $default  reduce using rule 38 (simpleexpr)


State 57

   44 term: factor .

    $default  reduce using rule 44 (term)


State 58

   29 statement: WHILE expression . DO statement

    DO  shift, and go to state 81


State 59

   20 compoundstatement: BEGINTOK optionalstatements ENDTOK .

    $default  reduce using rule 20 (compoundstatement)


State 60

   24 statementlist: statementlist ';' . statement

    IDENTIFIER  shift, and go to state 25
    BEGINTOK    shift, and go to state 18
    IF          shift, and go to state 26
    WHILE       shift, and go to state 27

    compoundstatement  go to state 28
    statement          go to state 82
    variable           go to state 32
    procstatement      go to state 33


State 61

   25 statement: variable ASSIGN . expression

    IDENTIFIER  shift, and go to state 47
    NUMBER      shift, and go to state 48
    NOT         shift, and go to state 49
    '('         shift, and go to state 50
    '+'         shift, and go to state 51
    '-'         shift, and go to state 52

    expression  go to state 83
    simpleexpr  go to state 54
    sign        go to state 55
    term        go to state 56
    factor      go to state 57


State 62

   12 subprogdecl: subprogheading declarations compoundstatement .

    $default  reduce using rule 12 (subprogdecl)


State 63

    7 type: ARRAY '[' . NUMBER RANGE NUMBER ']' OF standardtype

    NUMBER  shift, and go to state 84


State 64

    4 declarations: declarations VAR identlist ':' type ';' .

    $default  reduce using rule 4 (declarations)


State 65

   14 subprogheading: FUNCTION $@1 IDENTIFIER arguments . ':' standardtype ';'

    ':'  shift, and go to state 85


State 66

    3 identlist: identlist . ',' IDENTIFIER
   18 paramlist: identlist . ':' type

    ','  shift, and go to state 9
    ':'  shift, and go to state 86


State 67

   16 arguments: '(' paramlist . ')'
   19 paramlist: paramlist . ';' identlist ':' type

    ')'  shift, and go to state 87
    ';'  shift, and go to state 88


State 68

   15 subprogheading: PROCEDURE IDENTIFIER arguments ';' .

    $default  reduce using rule 15 (subprogheading)


State 69

   33 procstatement: IDENTIFIER '(' exprlist . ')'
   35 exprlist: exprlist . ',' expression

    ')'  shift, and go to state 89
    ','  shift, and go to state 90


State 70

   34 exprlist: expression .

    $default  reduce using rule 34 (exprlist)


State 71

   31 variable: IDENTIFIER '[' expression . ']'

    ']'  shift, and go to state 91


State 72

   47 factor: IDENTIFIER '(' . exprlist ')'

    IDENTIFIER  shift, and go to state 47
    NUMBER      shift, and go to state 48
    NOT         shift, and go to state 49
    '('         shift, and go to state 50
    '+'         shift, and go to state 51
    '-'         shift, and go to state 52

    exprlist    go to state 92
    expression  go to state 70
    simpleexpr  go to state 54
    sign        go to state 55
    term        go to state 56
    factor      go to state 57


State 73

   50 factor: NOT factor .

    $default  reduce using rule 50 (factor)


State 74

   49 factor: '(' expression . ')'

    ')'  shift, and go to state 93


State 75

   28 statement: IF expression THEN . statement ELSE statement

    IDENTIFIER  shift, and go to state 25
    BEGINTOK    shift, and go to state 18
    IF          shift, and go to state 26
    WHILE       shift, and go to state 27

    compoundstatement  go to state 28
    statement          go to state 94
    variable           go to state 32
    procstatement      go to state 33


State 76

   37 expression: simpleexpr RELOP . simpleexpr

    IDENTIFIER  shift, and go to state 47
    NUMBER      shift, and go to state 48
    NOT         shift, and go to state 49
    '('         shift, and go to state 50
    '+'         shift, and go to state 51
    '-'         shift, and go to state 52

    simpleexpr  go to state 95
    sign        go to state 55
    term        go to state 56
    factor      go to state 57


State 77

   40 simpleexpr: simpleexpr '+' . term

    IDENTIFIER  shift, and go to state 47
    NUMBER      shift, and go to state 48
    NOT         shift, and go to state 49
    '('         shift, and go to state 50

    term    go to state 96
    factor  go to state 57


State 78

   41 simpleexpr: simpleexpr '-' . term

    IDENTIFIER  shift, and go to state 47
    NUMBER      shift, and go to state 48
    NOT         shift, and go to state 49
    '('         shift, and go to state 50

    term    go to state 97
    factor  go to state 57


State 79

   39 simpleexpr: sign term .
   45 term: term . MULOP factor

    MULOP  shift, and go to state 80

    $default  reduce using rule 39 (simpleexpr)


State 80

   45 term: term MULOP . factor

    IDENTIFIER  shift, and go to state 47
    NUMBER      shift, and go to state 48
    NOT         shift, and go to state 49
    '('         shift, and go to state 50

    factor  go to state 98


State 81

   29 statement: WHILE expression DO . statement

    IDENTIFIER  shift, and go to state 25
    BEGINTOK    shift, and go to state 18
    IF          shift, and go to state 26
    WHILE       shift, and go to state 27

    compoundstatement  go to state 28
    statement          go to state 99
    variable           go to state 32
    procstatement      go to state 33


State 82

   24 statementlist: statementlist ';' statement .

    $default  reduce using rule 24 (statementlist)


State 83

   25 statement: variable ASSIGN expression .

    $default  reduce using rule 25 (statement)


State 84

    7 type: ARRAY '[' NUMBER . RANGE NUMBER ']' OF standardtype

    RANGE  shift, and go to state 100


State 85

   14 subprogheading: FUNCTION $@1 IDENTIFIER arguments ':' . standardtype ';'

    INTEGER  shift, and go to state 38
    REAL     shift, and go to state 39

    standardtype  go to state 101


State 86

   18 paramlist: identlist ':' . type

    ARRAY    shift, and go to state 37
    INTEGER  shift, and go to state 38
    REAL     shift, and go to state 39

    type          go to state 102
    standardtype  go to state 41


State 87

   16 arguments: '(' paramlist ')' .

    $default  reduce using rule 16 (arguments)


State 88

   19 paramlist: paramlist ';' . identlist ':' type

    IDENTIFIER  shift, and go to state 6

    identlist  go to state 103


State 89

   33 procstatement: IDENTIFIER '(' exprlist ')' .

    $default  reduce using rule 33 (procstatement)


State 90

   35 exprlist: exprlist ',' . expression

    IDENTIFIER  shift, and go to state 47
    NUMBER      shift, and go to state 48
    NOT         shift, and go to state 49
    '('         shift, and go to state 50
    '+'         shift, and go to state 51
    '-'         shift, and go to state 52

    expression  go to state 104
    simpleexpr  go to state 54
    sign        go to state 55
    term        go to state 56
    factor      go to state 57


State 91

   31 variable: IDENTIFIER '[' expression ']' .

    $default  reduce using rule 31 (variable)


State 92

   35 exprlist: exprlist . ',' expression
   47 factor: IDENTIFIER '(' exprlist . ')'

    ')'  shift, and go to state 105
    ','  shift, and go to state 90


State 93

   49 factor: '(' expression ')' .

    $default  reduce using rule 49 (factor)


State 94

   28 statement: IF expression THEN statement . ELSE statement

    ELSE  shift, and go to state 106


State 95

   37 expression: simpleexpr RELOP simpleexpr .
   40 simpleexpr: simpleexpr . '+' term
   41           | simpleexpr . '-' term

    '+'  shift, and go to state 77
    '-'  shift, and go to state 78

    $default  reduce using rule 37 (expression)


State 96

   40 simpleexpr: simpleexpr '+' term .
   45 term: term . MULOP factor

    MULOP  shift, and go to state 80

    $default  reduce using rule 40 (simpleexpr)


State 97

   41 simpleexpr: simpleexpr '-' term .
   45 term: term . MULOP factor

    MULOP  shift, and go to state 80

    $default  reduce using rule 41 (simpleexpr)


State 98

   45 term: term MULOP factor .

    $default  reduce using rule 45 (term)


State 99

   29 statement: WHILE expression DO statement .

    $default  reduce using rule 29 (statement)


State 100

    7 type: ARRAY '[' NUMBER RANGE . NUMBER ']' OF standardtype

    NUMBER  shift, and go to state 107


State 101

   14 subprogheading: FUNCTION $@1 IDENTIFIER arguments ':' standardtype . ';'

    ';'  shift, and go to state 108


State 102

   18 paramlist: identlist ':' type .

    $default  reduce using rule 18 (paramlist)


State 103

    3 identlist: identlist . ',' IDENTIFIER
   19 paramlist: paramlist ';' identlist . ':' type

    ','  shift, and go to state 9
    ':'  shift, and go to state 109


State 104

   35 exprlist: exprlist ',' expression .

    $default  reduce using rule 35 (exprlist)


State 105

   47 factor: IDENTIFIER '(' exprlist ')' .

    $default  reduce using rule 47 (factor)


State 106

   28 statement: IF expression THEN statement ELSE . statement

    IDENTIFIER  shift, and go to state 25
    BEGINTOK    shift, and go to state 18
    IF          shift, and go to state 26
    WHILE       shift, and go to state 27

    compoundstatement  go to state 28
    statement          go to state 110
    variable           go to state 32
    procstatement      go to state 33


State 107

    7 type: ARRAY '[' NUMBER RANGE NUMBER . ']' OF standardtype

    ']'  shift, and go to state 111


State 108

   14 subprogheading: FUNCTION $@1 IDENTIFIER arguments ':' standardtype ';' .

    $default  reduce using rule 14 (subprogheading)


State 109

   19 paramlist: paramlist ';' identlist ':' . type

    ARRAY    shift, and go to state 37
    INTEGER  shift, and go to state 38
    REAL     shift, and go to state 39

    type          go to state 112
    standardtype  go to state 41


State 110

   28 statement: IF expression THEN statement ELSE statement .

    $default  reduce using rule 28 (statement)


State 111

    7 type: ARRAY '[' NUMBER RANGE NUMBER ']' . OF standardtype

    OF  shift, and go to state 113


State 112

   19 paramlist: paramlist ';' identlist ':' type .

    $default  reduce using rule 19 (paramlist)


State 113

    7 type: ARRAY '[' NUMBER RANGE NUMBER ']' OF . standardtype

    INTEGER  shift, and go to state 38
    REAL     shift, and go to state 39

    standardtype  go to state 114


State 114

    7 type: ARRAY '[' NUMBER RANGE NUMBER ']' OF standardtype .

    $default  reduce using rule 7 (type)
