/* scanner for a Mini Pascal */

%{
#include <stdio.h>
#include <stdlib.h>
#include "minipas.tab.h"   /* will be generated by Bison */

int linenr = 1;
int colnr  = 1;

static char *inputbuffer;

static int eat() {
  char *s;
  for (s=yytext; *s; s++) {
    if (*s == '\n') {
      linenr++;
      colnr = 0;
    } 
    colnr++;
  }
}

%}

DIGIT    [0-9]
ID       [a-zA-Z][a-zA-Z0-9_]*

%%

[Pp][Rr][Oo][Gg][Rr][Aa][Mm]         { eat(); return PROGRAM; }
[Vv][Aa][Rr]                         { eat(); return VAR; }
[Aa][Rr][Rr][Aa][Yy]                 { eat(); return ARRAY; }
[Oo][Ff]                             { eat(); return OF; }
[Ii][Nn][Tt][Ee][Gg][Ee][Rr]         { eat(); yylval.type=265; return INTEGER; }
[Rr][Ee][Aa][Ll]                     { eat(); yylval.type=266; return REAL; }
[Ff][Uu][Nn][Cc][Tt][Ii][Oo][Nn]     { eat(); return FUNCTION; }
[Pp][Rr][Oo][Cc][Ee][Dd][Uu][Rr][Ee] { eat(); return PROCEDURE; }
[Bb][Ee][Gg][Ii][Nn]                 { eat(); return BEGINTOK; }
[Ee][Nn][Dd]                         { eat(); return ENDTOK; }
[Ii][Ff]                             { eat(); return IF; }
[Tt][Hh][Ee][Nn]                     { eat(); return THEN; }
[Ee][Ll][Ss][Ee]                     { eat(); return ELSE; }
[Ww][Hh][Ii][Ll][Ee]                 { eat(); return WHILE; }
[Dd][Oo]                             { eat(); return DO; }
writeln			             { eat(); return WRITELN; }
readln			             { eat(); return READLN; }

"."                           { eat(); return '.';    }
"("                           { eat(); return '(';    }
")"                           { eat(); return ')';    }
","                           { eat(); return ',';    }
";"                           { eat(); return ';';    }
":"                           { eat(); return ':';    }
".."                          { eat(); return RANGE;  }
":="                          { eat(); return ASSIGN; }
"<"                           { eat(); return RELOP;  }
"<="                          { eat(); return RELOP;  }
"="                           { eat(); return RELOP;  }
">="                          { eat(); return RELOP;  }
">"                           { eat(); return RELOP;  }
"<>"                          { eat(); return RELOP;  }
"+"                           { eat(); return '+';    }
"-"                           { eat(); return '-';    }
"*"                           { eat(); return MULOP;  }
"/"                           { eat(); return MULOP;  }
[Dd][Ii][Vv]                  { eat(); return MULOP;  }
[Mm][Oo][Dd]                  { eat(); return MULOP;  }

{DIGIT}+                      { eat(); yylval.type=265; return NUMBER; }
{DIGIT}+"."{DIGIT}*           { eat(); yylval.type=266; return NUMBER; }
{ID}                          { eat(); yylval.strtabptr=insertStringTable(yytext); return IDENTIFIER; }

"{"[^}]*"}"                   { eat(); /* eat comment */ }

[ \t]+                        { eat(); /* eat whitespace */ }
\n                            { linenr++; colnr = 1;     }

.           { fprintf(stderr, "Unrecognized character: %s\n", yytext );
              exit(EXIT_FAILURE);
            }

%%
void initLexer(char *filename) {
  FILE *f = fopen(filename, "r");
  int length;
  
  if (f == NULL) {
    fprintf(stderr, "Error: failed to open file\n");
    exit(EXIT_FAILURE);
  }
  fseek (f, 0, SEEK_END);
  length = ftell (f);
  fseek (f, 0, SEEK_SET);
  inputbuffer = malloc (length+1);
  inputbuffer[length]='\0';
  length = fread (inputbuffer, 1, length, f);
  fclose (f);
  yyin = fopen(filename, "r");
}

void showLine() {
  char *p = inputbuffer;
  int line = linenr;
  while ((*p != '\0') && (line > 1)) {
    line -= (*p == '\n');
    p++;
  }
  printf("line %3d: ", linenr);
  while ((*p != '\0') && (*p != '\n')) {
    putchar(*p);
    p++;
  }
  putchar('\n');
}
 
void finalizeLexer() {
  free(inputbuffer);
  yylex_destroy();
}
